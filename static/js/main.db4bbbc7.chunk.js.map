{"version":3,"sources":["index.js"],"names":["Square","props","className","winner_box","onClick","value","Board","i","boxes","winner","this","j","push","squares","grid","index","renderRowSquares","renderSquare","React","Component","Game","reverseMoves","setState","state","ascending","history","Array","fill","row","col","xIsNext","stepNumber","slice","calculateWinner","Math","floor","concat","length","step","status","current","draw","calculateDraw","moves","map","move","desc","jumpTo","handleClick","type","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db4bbbc7.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Square(props) {\n  return (\n    <button\n      className={props.winner_box ? \" square text-green\" : \"square\"}\n      onClick={() => {\n        props.onClick();\n      }}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderRowSquares(i) {\n    let boxes = [],\n      winner_box;\n    let winner = this.props.winner;\n\n    for (let j = i; j < i + 3; j++) {\n      if (winner && (j === winner[0] || j === winner[1] || j === winner[2])) {\n        winner_box = true;\n      } else {\n        winner_box = false;\n      }\n      boxes.push(\n        <Square\n          value={this.props.squares[j]}\n          onClick={() => this.props.onClick(j)}\n          winner_box={winner_box}\n        />\n      );\n    }\n    return boxes;\n  }\n  renderSquare() {\n    let grid = [];\n    for (let index = 0; index < 9; index += 3) {\n      grid.push(\n        <div className=\"board-row\">{this.renderRowSquares(index)}</div>\n      );\n    }\n    return grid;\n  }\n  render() {\n    return <div>{this.renderSquare()}</div>;\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n          row: null,\n          col: null,\n        },\n      ],\n      winner: [],\n      xIsNext: true,\n      stepNumber: 0,\n      ascending: true,\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[this.state.stepNumber];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    let row = Math.floor(i / 3) + 1;\n    let col = (i % 3) + 1;\n\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      ...this.state,\n      history: history.concat([\n        {\n          squares: squares,\n          row: row,\n          col: col,\n        },\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      ...this.state,\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n  reverseMoves = () => {\n    this.setState({\n      ...this.state,\n      ascending: !this.state.ascending,\n    });\n  };\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const draw = calculateDraw(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move\n        ? `Go to move #${move} at (${step.row}, ${step.col})`\n        : \"Go to game start\";\n      return (\n        <li key={move}>\n          <button\n            className={this.state.stepNumber === move ? \"activeStep\" : \"\"}\n            onClick={() => this.jumpTo(move)}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + current.squares[winner[0]];\n    } else if (draw) {\n      status = \"DRAW\";\n    } else {\n      status = \"Next Player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            winner={winner}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div>\n            <p>\n              Ascending\n              <label className=\"switch\">\n                <input type=\"checkbox\" onClick={() => this.reverseMoves()} />\n                <span className=\"slider round\"></span>\n              </label>\n              Descending\n            </p>\n          </div>\n          <ol className={this.state.ascending ? \"straight\" : \"reverse\"}>\n            {moves}\n          </ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return lines[i];\n    }\n  }\n  return null;\n}\n\nfunction calculateDraw(squares) {\n  for (let i = 0; i < 9; i++) {\n    if (squares[i] === null) return false;\n  }\n  return true;\n}\n"],"sourceRoot":""}